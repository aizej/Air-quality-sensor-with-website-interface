#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# (c) Copyright 2024 Sensirion AG, Switzerland
#
#     THIS FILE IS AUTOMATICALLY GENERATED!
#
# Generator:     sensirion-driver-generator 0.40.0
# Product:       sht4x
# Model-Version: 2.1.1
#

import argparse
import time
from sensirion_i2c_driver import LinuxI2cTransceiver, I2cConnection, CrcCalculator
from sensirion_driver_adapters.i2c_adapter.i2c_channel import I2cChannel
from sensirion_i2c_sht4x.device import Sht4xDevice

parser = argparse.ArgumentParser()
parser.add_argument('--i2c-port', '-p', default='/dev/i2c-3')
args = parser.parse_args()

def get_avg_of_k_measurements(k):
    with LinuxI2cTransceiver(args.i2c_port) as i2c_transceiver:
        channel = I2cChannel(I2cConnection(i2c_transceiver),
                            slave_address=0x44,
                            crc=CrcCalculator(8, 0x31, 0xff, 0x0))
        sensor = Sht4xDevice(channel)
        try:
            sensor.soft_reset()
            time.sleep(0.01)
        except BaseException:
            ...
        serial_number = sensor.serial_number()
        
        total_temperature = 0
        total_humidity = 0
        for i in range(k):
            
            try:
                time.sleep(0.02)
                (a_temperature, a_humidity) = sensor.measure_lowest_precision()
                total_temperature += a_temperature.value
                total_humidity += a_humidity.value
                
            except BaseException:
                continue
        
    avg_temperature = total_temperature / k
    avg_humidity = total_humidity / k
    return avg_temperature, avg_humidity



if __name__ == "__main__":
    print(get_avg_of_k_measurements(10))